{"version":3,"sources":["Recipe.js","Nav.js","About.js","Shop.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","url","theme","coldGray","resizable","className","style","window","windowHeader","headerTitle","recipe","box1","role","aria-label","src","alt","box2","map","ingredient","index","key","text","box3","Math","ceil","box4","href","target","Nav","position","size","to","variant","About","Shop","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","Home","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","value","path","exact","component","placeholder","onChange","e","fullWidth","onClick","preventDefault","marginLeft","uri","label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.ebec2361.chunk.js","sourcesContent":["import React from 'react';\nimport style from './recipe.module.css';\nimport { ThemeProvider } from 'styled-components';\nimport { Button, WindowHeader, Window, WindowContent } from 'react95';\n// pick a theme of your choice\nimport coldGray from 'react95/dist/themes/coldGray';\nimport { withRouter } from 'react-router-dom';\n\n\nconst Recipe = ({title, calories, image, ingredients, url}) =>{\n    //  const routeChange = () => {\n    //     let path = url;\n    //     this.props.history.push(path);\n    //   };\n\n    return(\n        <ThemeProvider theme={coldGray}>\n            <Window resizable className={style.window}>\n                <WindowHeader className={style.windowHeader}>\n                    <div className={style.headerTitle}>\n                        <span>{title}</span>\n                    </div>                                                     \n                </WindowHeader>\n                <WindowContent>                   \n                    <div className={style.recipe}>\n                        <div className={style.box1}>\n                            {/* <h1>{title}</h1> */}\n                            <Window className={style.window}>\n                                <WindowHeader>\n                                <div className={style.headerTitle}>\n                                    <span role='img' aria-label='Kiwi'>\n                                     â™¥ {title}\n                                    </span>   \n                                </div>            \n                                </WindowHeader>\n                            <WindowContent>\n                                <img className={style.image} src={image} alt=\"\"></img>\n                            </WindowContent>\n                        </Window>\n                        </div>\n                        <div className={style.box2}>\n                            <h1>Ingredients</h1>\n                            <ol>\n                                {ingredients.map((ingredient,index) =>(\n                                    <li key={index}>{ingredient.text}</li>\n                                ))}\n                            </ol>\n                        </div>                       \n                        <div className={style.box3}>\n                            <h1>Calories</h1>\n                            <p>{Math.ceil(calories)}</p>  \n                        </div> \n                        <div className={style.box4}> \n                            <a href={url} target=\"_blank\">Show Recipe</a>\n                        </div>             \n                    </div>\n                </WindowContent>\n            </Window>\n        </ThemeProvider>\n    )\n};\n\nexport default Recipe;","import React from 'react';\nimport { Bar, AppBar, Toolbar, Button } from 'react95';\nimport { ThemeProvider } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport coldGray from 'react95/dist/themes/coldGray';\n\nconst Nav = () => {\n    return(\n        <ThemeProvider theme={coldGray}>\n            <AppBar style={{position:'static'}}>\n            <Toolbar>\n            <Bar size={35} />\n            <Link to='/about'><Button variant='menu'>About</Button></Link>\n            <Link to='/shop'><Button variant='menu'>Shop</Button></Link>\n            <Bar size={35} />\n            </Toolbar>\n        </AppBar>\n      </ThemeProvider>\n    );\n}\n\nexport default Nav;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nconst About = () => {\n    return(\n        <div>\n            <h1>About Page</h1>\n        </div>\n    );\n}\n\nexport default About;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nconst Shop = () => {\n    return(\n        <div>\n            <h1>Shop Page</h1>\n        </div>\n    );\n}\n\nexport default Shop;\n","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport Nav from './Nav';\nimport About from './About';\nimport Shop from './Shop';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n// import logo from './logo.svg';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport { styleReset, Button,TextField, \n  WindowHeader, Window,\n  List, ListItem, Divider, WindowContent } from 'react95';\n// pick a theme of your choice\nimport coldGray from \"react95/dist/themes/coldGray\";\n// original Windows95 font (optionally)\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\nimport './App.css';\n\nconst APP_ID = '3290a36b';\nconst APP_KEY = '98130d36463781ef6aee936fe71ddc24';\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('strawberry');\n\n  useEffect(()=>{\n    getRecipes();\n    \n  }, [query]);\n  \n\n  const getRecipes = async () =>{\n    try{\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      const data = await response.json(); \n      setRecipes(data.hits);\n      console.log(data.hits);\n    } catch(error) {\n      throw error;\n    }\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n  \n  const [state, setState] = useState({\n    value: ''\n  });\n\n  const handleChange = e => setState({ value: e.target.value });\n  const reset = () => setState({ value: '' });\n\n  return(\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path =\"/shop\" exact component={Shop}/>\n        </Switch>\n      </Router>\n      <ThemeProvider theme={coldGray}>\n        <div className=\"search-form\">\n          <TextField\n            className=\"search-bar\"\n            value={search}\n            placeholder='Type here...'\n            onChange={updateSearch}\n            fullWidth\n          />\n          <Button onClick={getSearch} style={{ marginLeft: '2px' }}>\n            Search\n          </Button>\n          </div>\n        <div className=\"recipes\">\n          {recipes.map(recipe => (\n            <Recipe \n            key={recipe.recipe.uri}\n            title={recipe.recipe.label} \n            calories={recipe.recipe.calories} \n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            url={recipe.recipe.url}/>\n          ))}\n        </div>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nconst Home = () => (\n  <div>\n    <h1>Homepage</h1>\n  </div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"windowHeader\":\"recipe_windowHeader__h0Jet\",\"headerTitle\":\"recipe_headerTitle__2VVCO\",\"box1\":\"recipe_box1__3awWM\",\"window\":\"recipe_window__28a59\",\"box2\":\"recipe_box2__363Xr\",\"box3\":\"recipe_box3__29Ajy\",\"box4\":\"recipe_box4__2eQz5\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}